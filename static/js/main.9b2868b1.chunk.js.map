{"version":3,"sources":["NotFound.js","App.js","serviceWorker.js","index.js","Scarecrow.png"],"names":["Container","styled","div","DivContainer","TextError","Image","img","DivTitle","DivText","Button","button","Footer","p","NotFound","src","logo","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"wtFAIO,IAAMA,EAAYC,IAAOC,IAAV,KAWTC,EAAeF,IAAOC,IAAV,KAqBZE,EAAYH,IAAOC,IAAV,KAWTG,EAAQJ,IAAOK,IAAV,KAcLC,EAAWN,IAAOC,IAAV,KAiBRM,EAAUP,IAAOC,IAAV,KAWPO,EAASR,IAAOS,OAAV,KAeNC,EAASV,IAAOW,EAAV,KAoCJC,EAxBE,WACf,OACE,oCACI,kBAACb,EAAD,KACI,kBAACG,EAAD,KACI,kBAACC,EAAD,sBACA,kBAACC,EAAD,CAAOS,IAAKC,IAAMC,IAAI,UAE1B,kBAACb,EAAD,KACI,kBAACI,EAAD,gCAGA,kBAACC,EAAD,oFAGA,kBAACC,EAAD,2BAIR,kBAACE,EAAD,sCC1HOM,MAVf,WACE,OACE,6BACE,gCACE,kBAAC,EAAD,SCKYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,wC","file":"static/js/main.9b2868b1.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport logo from './Scarecrow.png';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  max-width: 100%;\n\n  @media (min-width: 1024px) {\n    flex-wrap: nowrap;\n  }\n`;\n\nexport const DivContainer = styled.div`\n  display: flex;\n  width: 100%;\n  min-height: 100%;\n  flex-direction: column;\n  margin: 40px;\n  height: 100%;\n\n  @media (min-width: 768px) {\n    width: 50%;\n    min-height: 50%;\n    height: 100%;\n  }\n\n  @media (min-width: 1024px) {\n    width: 50%\n    min-height: 50%;\n    height: 100%;\n  }\n`;\n\nexport const TextError = styled.div`\n    font-family: 'Inconsolata', monospace;\n    font-style: normal;\n    font-weight: bold;\n    font-size: 24px;\n    line-height: 25px;\n    letter-spacing: -0.08em;\n    text-transform: uppercase;\n    color: #333333;\n`;\n\nexport const Image = styled.img`\n    width: 100%;  \n    height: 100%;\n    margin-top: 100px;\n    @media (min-width: 768px) {\n        margin-top: 50px;\n      }\n    \n      @media (min-width: 1024px) {\n        margin-top: 50px;\n      }\n    `;\n\n\nexport const DivTitle = styled.div`\n    font-family: 'Space Mono', monospace;\n    font-style: normal;\n    font-weight: bold;\n    font-size: 64px;\n    line-height: 95px;\n    letter-spacing: -0.035em;\n    color: #333333;\n    @media (min-width: 768px) {\n        margin-top: 50px;\n      }\n    \n      @media (min-width: 1024px) {\n        margin-top: 50px;\n      }\n    `;\n\nexport const DivText = styled.div`\n    font-family: 'Space Mono', monospace;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 24px;\n    line-height: 36px;\n    letter-spacing: -0.035em;\n    color: #4F4F4F;\n    margin-top: 36px;\n`;\n\nexport const Button = styled.button`\n    width: 216px;\n    height: 68px;\n    top: 663px;background: #333333;\n    font-family: 'Space Mono', monospace;\n    font-style: normal;\n    font-weight: bold;\n    font-size: 14px;\n    line-height: 21px;\n    letter-spacing: -0.035em;\n    text-transform: uppercase;\n    color: #FFFFFF;\n    margin-top: 64px;\n`;\n\nexport const Footer = styled.p`\n    font-family: 'Montserrat', sans-serif;\n    font-style: normal;\n    font-weight: 600;\n    font-size: 14px;\n    line-height: 17px;\n    color: #333333;\n    text-align: center;\n`;\n\n\n\nconst NotFound = () => {\n  return (\n    <>\n        <Container>\n            <DivContainer>\n                <TextError>404 not found</TextError>\n                <Image src={logo} alt=\"logo\" />\n            </DivContainer>\n            <DivContainer>\n                <DivTitle>\n                    I have bad news for you\n                </DivTitle>\n                <DivText>\n                    The page you are looking for might be removed or is temporarily unavailable\n                </DivText>\n                <Button>Back to homepage</Button>\n            </DivContainer>\n            \n        </Container>\n        <Footer>Lorraine @ DevChallenges.io</Footer>\n    </>\n        )\n}\n\nexport default NotFound","import React from 'react'\nimport NotFound from './NotFound'\n\nfunction App() {\n  return (\n    <div>\n      <header>\n        <NotFound />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Scarecrow.9f720a55.png\";"],"sourceRoot":""}