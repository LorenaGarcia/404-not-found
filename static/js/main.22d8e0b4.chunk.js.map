{"version":3,"sources":["images/scare-crow.png","components/ErrorPage/ErrorPage.styles.js","components/ErrorPage/ErrorPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Container","styled","div","Grid","Header","ImageMain","Main","Footer","TextError","Image","img","Title","Description","Button","button","ErrorPage","src","logo","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,wC,mkFCE3C,IAAMC,EAAYC,IAAOC,IAAV,KAITC,EAAOF,IAAOC,IAAV,KAuBJE,EAASH,IAAOC,IAAV,KAING,EAAYJ,IAAOC,IAAV,KAITI,EAAOL,IAAOC,IAAV,KAIJK,EAASN,IAAOC,IAAV,KAcNM,EAAYP,IAAOC,IAAV,KAUTO,EAAQR,IAAOS,IAAV,KAKLC,EAAQV,IAAOC,IAAV,KAgBLU,EAAcX,IAAOC,IAAV,KAUXW,EAASZ,IAAOa,OAAV,K,iBChFNC,EAAY,WAChB,OACE,kBAACf,EAAD,KACE,kBAACG,EAAD,KACE,kBAACC,EAAD,KACE,kBAACI,EAAD,uBAEF,kBAACH,EAAD,KACE,kBAACI,EAAD,CAAOO,IAAKC,IAAMC,IAAI,UAExB,kBAACZ,EAAD,KACE,kBAACK,EAAD,gCACA,kBAACC,EAAD,oFAIA,kBAACC,EAAD,0BAEF,kBAACN,EAAD,KACE,gEC5BKY,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.22d8e0b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/scare-crow.9f720a55.png\";","import styled from \"styled-components\";\n\nconst Container = styled.div`\n  height: 100vh;\n`;\n\nconst Grid = styled.div`\n  padding: 1rem;\n  display: grid;\n  grid-gap: 1rem;\n  grid-template-rows: auto 1fr 2rem;\n  grid-template-columns: 1fr 1fr;\n  grid-template-areas:\n    \"header header\"\n    \"imageMain main\"\n    \"footer footer\";\n\n  @media (max-width: 480px) {\n    grid-gap: 4rem;\n    grid-template-rows: auto 400px 1fr 2rem;\n    grid-template-columns: 1fr;\n    grid-template-areas:\n      \"header\"\n      \"imageMain\"\n      \"main\"\n      \"footer \";\n  }\n`;\n\nconst Header = styled.div`\n  grid-area: header;\n`;\n\nconst ImageMain = styled.div`\n  grid-area: imageMain;\n`;\n\nconst Main = styled.div`\n  grid-area: main;\n`;\n\nconst Footer = styled.div`\n  grid-area: footer;\n\n  p {\n    margin: 0;\n    font-family: \"Montserrat\", sans-serif;\n    font-style: normal;\n    font-weight: 600;\n    font-size: 14px;\n    color: #333333;\n    text-align: center;\n  }\n`;\n\nconst TextError = styled.div`\n  font-family: \"Inconsolata\", monospace;\n  font-style: normal;\n  font-weight: bold;\n  font-size: 24px;\n  letter-spacing: -0.08em;\n  text-transform: uppercase;\n  color: #333333;\n`;\n\nconst Image = styled.img`\n  width: 100%;\n  height: 100%;\n`;\n\nconst Title = styled.div`\n  font-family: \"Space Mono\", monospace;\n  font-style: normal;\n  font-weight: bold;\n  font-size: 64px;\n  letter-spacing: -0.035em;\n  color: #333333;\n  @media (min-width: 768px) {\n    margin-top: 50px;\n  }\n\n  @media (min-width: 1024px) {\n    margin-top: 50px;\n  }\n`;\n\nconst Description = styled.div`\n  font-family: \"Space Mono\", monospace;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 24px;\n  letter-spacing: -0.035em;\n  color: #4f4f4f;\n  margin-top: 36px;\n`;\n\nconst Button = styled.button`\n  width: 216px;\n  height: 68px;\n  top: 663px;\n  background: #333333;\n  font-family: \"Space Mono\", monospace;\n  font-style: normal;\n  font-weight: bold;\n  font-size: 14px;\n  letter-spacing: -0.035em;\n  text-transform: uppercase;\n  color: #ffffff;\n  margin-top: 64px;\n`;\n\nexport {\n  Container,\n  Grid,\n  Header,\n  ImageMain,\n  Main,\n  Footer,\n  TextError,\n  Image,\n  Title,\n  Description,\n  Button,\n};\n","import React from \"react\";\nimport {\n  Container,\n  Header,\n  ImageMain,\n  Main,\n  Footer,\n  TextError,\n  Image,\n  Grid,\n  Title,\n  Description,\n  Button,\n} from \"./ErrorPage.styles\";\nimport logo from \"../../images/scare-crow.png\";\n\nconst ErrorPage = () => {\n  return (\n    <Container>\n      <Grid>\n        <Header>\n          <TextError>404 not found</TextError>\n        </Header>\n        <ImageMain>\n          <Image src={logo} alt=\"logo\" />\n        </ImageMain>\n        <Main>\n          <Title>I have bad news for you</Title>\n          <Description>\n            The page you are looking for might be removed or is temporarily\n            unavailable\n          </Description>\n          <Button>Back to homepage</Button>\n        </Main>\n        <Footer>\n          <p> created by username Lorraine</p>\n        </Footer>\n      </Grid>\n    </Container>\n  );\n};\n\nexport { ErrorPage };\n","import React from \"react\";\nimport { ErrorPage } from \"./components/ErrorPage\";\n\nfunction App() {\n  return <ErrorPage />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}